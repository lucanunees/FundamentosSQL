
	=== INNER JOIN, LeftJOIN, UNION, Group By, Having ===

 == INNER JOIN ==
 O join serve basicamente para pegar os dados de duas tabelas
e juntar em uma unica consulta, ele trás tudo que existe nas tabelas selecionadas.
 No caso do inner join ele pega todos os cursos que tem categoria, caso algum curso não tivesse
uma categoria ID, ele não iria trazer.

		
	Sintaxe:
	
 SELECT TOP 100 
	 [Curso].[ID]
    ,[Curso].[Nome]   -- <--Uma boa pratica trazer as informações das colunas desta forma.
    ,[Curso].[CategoriaID]
    ,[Categoria].[ID]
    ,[Categoria].[Nome]
		FROM [Curso]
			INNER JOIN [Categoria] -- <--Coloco a tabela que eu quero juntar as informações, ou seja, vou trazer tudo que tem na tabela curso que é relacionado com a tabela categoria.
				ON [Curso].[CategoriaID] = [Categoria].[ID]  -- <--No "ON" é o campo que eu quero trazer da tabela 
															 -- curso comparando com a de categoria.


	=== LEFT JOIN ===

 O leftJoin ele pega todos os itens da primeira tabela,
O retorno do leftJoin, ele tras todas os cursos e se caso alguma categoriaID não existir, ele
mostraria null, diferente do Inner JOIN que não traria os dados.

	Sintaxe:
	
	SELECT TOP 100 
	 [Curso].[ID]
    ,[Curso].[Nome]           
    ,[Curso].[CategoriaID]
    ,[Categoria].[ID]
    ,[Categoria].[Nome]
		FROM [Curso] -- <--- Ele pega todos os itens desta tabela
			LEFT JOIN [Categoria] 
				ON [Curso].[CategoriaID] = [Categoria].[ID]
	 
	 
     === FULL Join ===

 O full join retorna todos os dados das duas tabelas independente se existe ou não.

    Sintaxe:

USE [Cursos]

	SELECT TOP 100 
	 [Curso].[ID]
    ,[Curso].[Nome]           
    ,[Curso].[CategoriaID]
    ,[Categoria].[ID]
    ,[Categoria].[Nome]
		FROM [Curso] 
			FULL JOIN [Categoria] 
				ON [Curso].[CategoriaID] = [Categoria].[ID]
	 
     === UNION ===

 Você junta informações das tabelas e não precisa estar relacionadas. (PK e FK)

    Sintaxe:

USE [Cursos]

	SELECT TOP 100 *	 
     FROM [Curso] 
UNION                   -- <-- DESTA FORMA NÃO FUNCIONARIA, EU PRECISO ter dados similares.
    SELECT TOP 100 *	 
     FROM [Categoria] 


    SELECT TOP 100 
        [id],[Nome]	 
     FROM [Curso] 
UNION                   -- <-- Com os dados similares ele faz a junção das duas consultas.
    SELECT TOP 100 
        [ID], [Nome] 
     FROM [Categoria] 
 

	 === Group By ===

 Serve para agrupar determinadas colunas e retornar por exemplo o count.

     Sintaxe:

USE [Cursos]

    SELECT TOP 100 
        [Categoria].[Nome], -- Se eu colocar uma coluna aqui eu preciso adicionar no group by também
        COUNT([Curso].[CategoriaID]) AS [Cursos] -- Estou contando quantos cursos tem com a categoria ID       
    FROM [Categoria]  
        INNER JOIN [Curso] 
                ON [Curso].[CategoriaID] = [Categoria].[ID] -- Estou relacionando a categoria do curso, com o ID da categoria.
    GROUP BY 
    [Curso].[CategoriaID] -- E agrupando a quantidade de curso e ID da categoria.
    ,[Categoria].[Nome]


	 SELECT TOP 100 *
	FROM Curso
	
	
	 === Having ===

     Depois de utilizar o Group by, não é possivel adicionar o where, por isso utilizamos o having.
     O having serve como por exemplo "Onde".
     Ele é um filtro sobre o group by


     Sintaxe:

USE [Cursos]

    SELECT TOP 100 
        [Categoria].[Nome], 
        COUNT([Curso].[CategoriaID]) AS [Cursos] 
    FROM [Categoria]  
        INNER JOIN [Curso] 
                ON [Curso].[CategoriaID] = [Categoria].[ID] 
    GROUP BY 
    [Curso].[CategoriaID] 
    ,[Categoria].[Nome]

    HAVING -- Estou agrupando as informações e o Having é lido como "Onde" curso.categoriaID é = 2, ou seja ele vai me mostrar no retorno apenas os cursos que tem a categoria ID igual a 2.
        COUNT([Curso].[CategoriaID]) = 2 -- É preciso colocar a mesma sintaxe que da coluna, porém não funciona o ALIAS (Apelido).